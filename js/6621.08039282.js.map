{"version":3,"file":"js/6621.08039282.js","mappings":"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","sources":["webpack://vue-arcgis-0905/src/components/action-group/resources.ts","webpack://vue-arcgis-0905/src/components/action-group/action-group.scss","webpack://vue-arcgis-0905/src/components/action-group/action-group.tsx","webpack://vue-arcgis-0905/src/components/action-bar/utils.ts","webpack://vue-arcgis-0905/src/components/functional/ExpandToggle.tsx","webpack://vue-arcgis-0905/src/components/action-bar/resources.ts","webpack://vue-arcgis-0905/src/components/action-bar/action-bar.scss","webpack://vue-arcgis-0905/src/components/action-bar/action-bar.tsx","webpack://vue-arcgis-0905/src/utils/conditionalSlot.ts"],"sourcesContent":["export const SLOTS = {\n  menuActions: \"menu-actions\",\n  menuTooltip: \"menu-tooltip\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const CSS = {\n  container: \"container\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-background-color: Specifies the component's background color.\n * @prop --calcite-action-group-border-color: Specifies the component's border color when used in a calcite-action-bar or calcite-action-menu.\n * @prop --calcite-action-group-columns: Specifies the component's grid-template-columns when the `layout` property is `\"grid\"`.\n * @prop --calcite-action-group-gap: Specifies the component's gap  when the `layout` property is `\"grid\" and padding`.\n * @prop --calcite-action-group-padding: [Deprecated] Use --calcite-action-group-gap. Specifies the component's padding.\n *\n */\n\n:host {\n  @extend %component-host;\n\n  @apply flex\n  flex-col\n  p-0;\n\n  background-color: transparent;\n  border-color: var(--calcite-action-group-border-color, var(--calcite-color-border-3));\n  border-style: solid;\n  border-width: 0;\n}\n\n.container {\n  @apply flex flex-col flex-grow;\n}\n\n:host([columns=\"1\"]) {\n  --calcite-internal-action-group-columns: 1;\n}\n:host([columns=\"2\"]) {\n  --calcite-internal-action-group-columns: 2;\n}\n:host([columns=\"3\"]) {\n  --calcite-internal-action-group-columns: 3;\n}\n:host([columns=\"4\"]) {\n  --calcite-internal-action-group-columns: 4;\n}\n:host([columns=\"5\"]) {\n  --calcite-internal-action-group-columns: 5;\n}\n:host([columns=\"6\"]) {\n  --calcite-internal-action-group-columns: 6;\n}\n\n:host(:first-child) {\n  @apply pt-0;\n}\n\n:host([layout=\"horizontal\"]),\n:host([layout=\"horizontal\"]) .container {\n  @apply flex-row;\n}\n\n:host([layout=\"grid\"]) {\n  @apply grid;\n\n  .container {\n    @apply grid\n    place-content-stretch;\n    background-color: transparent;\n    grid-template-columns: repeat(\n      var(--calcite-action-group-columns, var(--calcite-internal-action-group-columns, 3)),\n      auto\n    );\n    gap: var(--calcite-action-group-gap, 1px);\n    padding: var(--calcite-action-group-gap, 1px);\n  }\n}\n\n@include base-component();\n","import { Component, Element, h, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { CalciteActionMenuCustomEvent } from \"../../components\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { Layout, Scale } from \"../interfaces\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport { slotChangeHasAssignedElement } from \"../../utils/dom\";\nimport { Columns } from \"./interfaces\";\nimport { ActionGroupMessages } from \"./assets/action-group/t9n\";\nimport { ICONS, SLOTS, CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding a group of `calcite-action`s.\n * @slot menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`.\n * @slot menu-tooltip - A slot for adding a `calcite-tooltip` for the menu.\n */\n@Component({\n  tag: \"calcite-action-group\",\n  styleUrl: \"action-group.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ActionGroup\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.menuOpen = false;\n  }\n\n  /**\n   *  Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * Indicates the layout of the component.\n   *\n   * @deprecated Use the `layout` property on the component's parent instead.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> = \"vertical\";\n\n  /**\n   * Indicates number of columns.\n   */\n  @Prop({ reflect: true }) columns: Columns;\n\n  /**\n   * When `true`, the `calcite-action-menu` is open.\n   */\n  @Prop({ reflect: true, mutable: true }) menuOpen = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Specifies the size of the `calcite-action-menu`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionGroupMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionGroupMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n  @Element() el: HTMLCalciteActionGroupElement;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionGroupMessages;\n\n  @State() hasMenuActions = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    connectConditionalSlotComponent(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderMenu(): VNode {\n    const { expanded, menuOpen, scale, layout, messages, overlayPositioning, hasMenuActions } =\n      this;\n\n    return (\n      <calcite-action-menu\n        expanded={expanded}\n        flipPlacements={[\"left\", \"right\"]}\n        hidden={!hasMenuActions}\n        label={messages.more}\n        onCalciteActionMenuOpen={this.setMenuOpen}\n        open={menuOpen}\n        overlayPositioning={overlayPositioning}\n        placement={layout === \"horizontal\" ? \"bottom-start\" : \"leading-start\"}\n        scale={scale}\n      >\n        <calcite-action\n          icon={ICONS.menu}\n          scale={scale}\n          slot={ACTION_MENU_SLOTS.trigger}\n          text={messages.more}\n          textEnabled={expanded}\n        />\n        <slot name={SLOTS.menuActions} onSlotchange={this.handleMenuActionsSlotChange} />\n        <slot name={SLOTS.menuTooltip} slot={ACTION_MENU_SLOTS.tooltip} />\n      </calcite-action-menu>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <div aria-label={this.label} class={CSS.container} role=\"group\">\n        <slot />\n        {this.renderMenu()}\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  setMenuOpen = (event: CalciteActionMenuCustomEvent<void>): void => {\n    this.menuOpen = !!(event.target as HTMLCalciteActionMenuElement).open;\n  };\n\n  handleMenuActionsSlotChange = (event: Event): void => {\n    this.hasMenuActions = slotChangeHasAssignedElement(event);\n  };\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { SLOTS as ACTION_GROUP_SLOTS } from \"../action-group/resources\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { Layout } from \"../interfaces\";\n\nconst groupBufferPx = 2;\n\nconst getAverage = (arr: number[]) => arr.reduce((p, c) => p + c, 0) / arr.length;\n\nexport const geActionDimensions = (\n  actions: HTMLCalciteActionElement[],\n): { actionWidth: number; actionHeight: number } => {\n  const actionsNotSlotted = actions.filter((action) => action.slot !== ACTION_GROUP_SLOTS.menuActions);\n  const actionLen = actionsNotSlotted?.length;\n  return {\n    actionWidth: actionLen ? getAverage(actionsNotSlotted.map((action) => action.clientWidth || 0)) : 0,\n    actionHeight: actionLen ? getAverage(actionsNotSlotted.map((action) => action.clientHeight || 0)) : 0,\n  };\n};\n\nconst getMaxActionCount = ({\n  width,\n  actionWidth,\n  layout,\n  height,\n  actionHeight,\n  groupCount,\n}: {\n  layout: Extract<\"horizontal\" | \"vertical\", Layout>;\n  height: number;\n  actionWidth: number;\n  width: number;\n  actionHeight: number;\n  groupCount: number;\n}): number => {\n  const maxContainerPx = layout === \"horizontal\" ? width : height;\n  const avgItemPx = layout === \"horizontal\" ? actionWidth : actionHeight;\n  return Math.floor((maxContainerPx - groupCount * groupBufferPx) / avgItemPx);\n};\n\nexport const getOverflowCount = ({\n  layout,\n  actionCount,\n  actionWidth,\n  width,\n  actionHeight,\n  height,\n  groupCount,\n}: {\n  layout: Extract<\"horizontal\" | \"vertical\", Layout>;\n  actionCount: number;\n  actionWidth: number;\n  width: number;\n  actionHeight: number;\n  height: number;\n  groupCount: number;\n}): number => {\n  return Math.max(actionCount - getMaxActionCount({ width, actionWidth, layout, height, actionHeight, groupCount }), 0);\n};\n\nexport const queryActions = (el: HTMLElement): HTMLCalciteActionElement[] => {\n  return Array.from(el.querySelectorAll(\"calcite-action\")).filter((action) =>\n    action.closest(\"calcite-action-menu\") ? action.slot === ACTION_MENU_SLOTS.trigger : true,\n  );\n};\n\nexport const overflowActions = ({\n  actionGroups,\n  expanded,\n  overflowCount,\n}: {\n  actionGroups: HTMLCalciteActionGroupElement[];\n  expanded: boolean;\n  overflowCount: number;\n}): void => {\n  let needToSlotCount = overflowCount;\n  actionGroups.reverse().forEach((group) => {\n    let slottedWithinGroupCount = 0;\n\n    const groupActions = queryActions(group).reverse();\n\n    groupActions.forEach((groupAction) => {\n      if (groupAction.slot === ACTION_GROUP_SLOTS.menuActions) {\n        groupAction.removeAttribute(\"slot\");\n        groupAction.textEnabled = expanded;\n      }\n    });\n\n    if (needToSlotCount > 0) {\n      groupActions.some((groupAction) => {\n        const unslottedActions = groupActions.filter((action) => !action.slot);\n\n        if (unslottedActions.length > 1 && groupActions.length > 2 && !groupAction.closest(\"calcite-action-menu\")) {\n          groupAction.textEnabled = true;\n          groupAction.setAttribute(\"slot\", ACTION_GROUP_SLOTS.menuActions);\n          slottedWithinGroupCount++;\n\n          if (slottedWithinGroupCount > 1) {\n            needToSlotCount--;\n          }\n        }\n\n        return needToSlotCount < 1;\n      });\n    }\n\n    forceUpdate(group);\n  });\n};\n","import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { queryActions } from \"../action-bar/utils\";\nimport { SLOTS as ACTION_GROUP_SLOTS } from \"../action-group/resources\";\nimport { Position, Scale } from \"../interfaces\";\n\ninterface ExpandToggleProps {\n  expanded: boolean;\n  expandText: string;\n  collapseText: string;\n  expandLabel: string;\n  collapseLabel: string;\n  el: HTMLElement;\n  position: Position;\n  tooltip?: HTMLCalciteTooltipElement;\n  toggle: () => void;\n  ref?: (el: HTMLElement) => void;\n  scale?: Scale;\n}\n\nconst ICONS = {\n  chevronsLeft: \"chevrons-left\",\n  chevronsRight: \"chevrons-right\",\n} as const;\n\nfunction getCalcitePosition(position: Position, el: HTMLElement): Position {\n  return position || el.closest(\"calcite-shell-panel\")?.position || \"start\";\n}\n\nexport function toggleChildActionText({\n  el,\n  expanded,\n}: {\n  el: HTMLElement;\n  expanded: boolean;\n}): void {\n  queryActions(el)\n    .filter((el) => el.slot !== ACTION_GROUP_SLOTS.menuActions)\n    .forEach((action) => (action.textEnabled = expanded));\n  el.querySelectorAll(\"calcite-action-group, calcite-action-menu\").forEach(\n    (el: HTMLCalciteActionMenuElement | HTMLCalciteActionGroupElement) => (el.expanded = expanded),\n  );\n}\n\nconst setTooltipReference = ({\n  tooltip,\n  referenceElement,\n  expanded,\n  ref,\n}: {\n  tooltip: HTMLCalciteTooltipElement;\n  referenceElement: HTMLCalciteActionElement;\n  expanded: boolean;\n  ref?: (el: HTMLElement) => void;\n}): HTMLCalciteActionElement => {\n  if (tooltip) {\n    tooltip.referenceElement = !expanded && referenceElement ? referenceElement : null;\n  }\n\n  if (ref) {\n    ref(referenceElement);\n  }\n\n  return referenceElement;\n};\n\nexport const ExpandToggle: FunctionalComponent<ExpandToggleProps> = ({\n  expanded,\n  expandText,\n  collapseText,\n  expandLabel,\n  collapseLabel,\n  toggle,\n  el,\n  position,\n  tooltip,\n  ref,\n  scale,\n}): VNode => {\n  const rtl = getElementDir(el) === \"rtl\";\n\n  const text = expanded ? collapseText : expandText;\n  const label = expanded ? collapseLabel : expandLabel;\n  const icons = [ICONS.chevronsLeft, ICONS.chevronsRight];\n\n  if (rtl) {\n    icons.reverse();\n  }\n\n  const end = getCalcitePosition(position, el) === \"end\";\n  const expandIcon = end ? icons[1] : icons[0];\n  const collapseIcon = end ? icons[0] : icons[1];\n\n  const actionNode = (\n    <calcite-action\n      icon={expanded ? expandIcon : collapseIcon}\n      id=\"expand-toggle\"\n      label={label}\n      onClick={toggle}\n      ref={(referenceElement): HTMLCalciteActionElement =>\n        setTooltipReference({ tooltip, referenceElement, expanded, ref })\n      }\n      scale={scale}\n      text={text}\n      textEnabled={expanded}\n      title={!expanded && !tooltip ? text : null}\n    />\n  );\n\n  return actionNode;\n};\n","export const CSS = {\n  actionGroupEnd: \"action-group--end\",\n};\n\nexport const SLOTS = {\n  actionsEnd: \"actions-end\",\n  bottomActions: \"bottom-actions\",\n  expandTooltip: \"expand-tooltip\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-bar-expanded-max-width: Specifies the maximum width of the component when it's `layout` is `\"vertical\"`.\n * @prop --calcite-action-bar-items-space: Specifies the space between slotted components in the component.\n */\n\n:host {\n  @extend %component-host;\n  @apply pointer-events-auto\n    inline-flex\n    self-stretch;\n\n  gap: var(--calcite-action-bar-items-space, 0);\n}\n\n:host([layout=\"vertical\"]) {\n  @apply flex-col;\n\n  &:host([overflow-actions-disabled]) {\n    overflow-y: auto;\n  }\n\n  &:host([expanded]) {\n    max-inline-size: var(--calcite-action-bar-expanded-max-width, auto);\n  }\n\n  .action-group--end {\n    margin-block-start: auto;\n  }\n\n  ::slotted(calcite-action-group:not(:last-of-type)) {\n    border-block-end-width: var(--calcite-border-width-sm);\n  }\n}\n\n:host([layout=\"horizontal\"]) {\n  @apply flex-row;\n\n  &:host([overflow-actions-disabled]) {\n    overflow-x: auto;\n  }\n\n  .action-group--end {\n    @apply ms-auto;\n  }\n\n  ::slotted(calcite-action-group:not(:last-of-type)) {\n    border-inline-end-width: var(--calcite-border-width-sm);\n  }\n}\n\n.action-group--end {\n  @apply justify-end;\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { debounce } from \"lodash-es\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport {\n  focusFirstTabbable,\n  slotChangeGetAssignedElements,\n  slotChangeHasAssignedElement,\n} from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { ExpandToggle, toggleChildActionText } from \"../functional/ExpandToggle\";\nimport { Layout, Position, Scale } from \"../interfaces\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport { DEBOUNCE } from \"../../utils/resources\";\nimport { ActionBarMessages } from \"./assets/action-bar/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\nimport { geActionDimensions, getOverflowCount, overflowActions, queryActions } from \"./utils\";\n\n/**\n * @slot - A slot for adding `calcite-action`s that will appear at the top of the component.\n * @slot bottom-actions - [Deprecated] Use the `\"actions-end\"` slot instead. A slot for adding `calcite-action`s that will appear at the bottom of the component, above the collapse/expand button.\n * @slot actions-end - A slot for adding `calcite-action`s that will appear at the end of the component, prior to the collapse/expand button.\n * @slot expand-tooltip - A slot to set the `calcite-tooltip` for the expand toggle.\n */\n@Component({\n  tag: \"calcite-action-bar\",\n  styleUrl: \"action-bar.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class ActionBar\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Specifies the accessible label for the last `calcite-action-group`.\n   */\n  @Prop() actionsEndGroupLabel: string;\n\n  /**\n   * When `true`, the expand-toggling behavior is disabled.\n   */\n  @Prop({ reflect: true }) expandDisabled = false;\n\n  @Watch(\"expandDisabled\")\n  expandHandler(): void {\n    this.overflowActions();\n  }\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true, mutable: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    const { el, expanded } = this;\n    toggleChildActionText({ el, expanded });\n    this.overflowActions();\n  }\n\n  /**\n   *  Specifies the layout direction of the actions.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\", Layout> = \"vertical\";\n\n  @Watch(\"layout\")\n  layoutHandler(): void {\n    this.updateGroups();\n  }\n\n  /**\n   * Disables automatically overflowing `calcite-action`s that won't fit into menus.\n   */\n  @Prop({ reflect: true }) overflowActionsDisabled = false;\n\n  @Watch(\"overflowActionsDisabled\")\n  overflowDisabledHandler(overflowActionsDisabled: boolean): void {\n    if (overflowActionsDisabled) {\n      this.resizeObserver?.disconnect();\n      return;\n    }\n\n    this.resizeObserver?.observe(this.el);\n    this.overflowActions();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Arranges the component depending on the element's `dir` property.\n   */\n  @Prop({ reflect: true }) position: Extract<\"start\" | \"end\", Position>;\n\n  /**\n   * Specifies the size of the expand `calcite-action`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionBarMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionBarMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the `expanded` property is toggled.\n   */\n  @Event({ cancelable: false }) calciteActionBarToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionBarElement;\n\n  mutationObserver = createObserver(\"mutation\", () => {\n    const { el, expanded } = this;\n    toggleChildActionText({ el, expanded });\n    this.overflowActions();\n  });\n\n  resizeObserver = createObserver(\"resize\", (entries) => this.resizeHandlerEntries(entries));\n\n  expandToggleEl: HTMLCalciteActionElement;\n\n  @State() effectiveLocale: string;\n\n  @State() hasActionsEnd = false;\n\n  @State() hasBottomActions = false;\n\n  @State() expandTooltip: HTMLCalciteTooltipElement;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionBarMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  componentDidLoad(): void {\n    const { el, expanded } = this;\n\n    setComponentLoaded(this);\n    toggleChildActionText({ el, expanded });\n    this.overflowActions();\n  }\n\n  connectedCallback(): void {\n    const { el, expanded } = this;\n\n    connectLocalized(this);\n    connectMessages(this);\n    toggleChildActionText({ el, expanded });\n\n    this.mutationObserver?.observe(el, { childList: true, subtree: true });\n\n    if (!this.overflowActionsDisabled) {\n      this.resizeObserver?.observe(el);\n    }\n\n    this.overflowActions();\n    connectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n    this.resizeObserver?.disconnect();\n    disconnectConditionalSlotComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Overflows actions that won't fit into menus.\n   *\n   * @internal\n   */\n  @Method()\n  async overflowActions(): Promise<void> {\n    this.resize({ width: this.el.clientWidth, height: this.el.clientHeight });\n  }\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    focusFirstTabbable(this.el);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  actionMenuOpenHandler = (event: CustomEvent<void>): void => {\n    if ((event.target as HTMLCalciteActionGroupElement).menuOpen) {\n      const composedPath = event.composedPath();\n      Array.from(this.el.querySelectorAll(\"calcite-action-group\")).forEach((group) => {\n        if (!composedPath.includes(group)) {\n          group.menuOpen = false;\n        }\n      });\n    }\n  };\n\n  resizeHandlerEntries = (entries: ResizeObserverEntry[]): void => {\n    entries.forEach(this.resizeHandler);\n  };\n\n  resizeHandler = (entry: ResizeObserverEntry): void => {\n    const { width, height } = entry.contentRect;\n    this.resize({ width, height });\n  };\n\n  private resize = debounce(({ width, height }: { width: number; height: number }): void => {\n    const { el, expanded, expandDisabled, layout, overflowActionsDisabled } = this;\n\n    if (\n      overflowActionsDisabled ||\n      (layout === \"vertical\" && !height) ||\n      (layout === \"horizontal\" && !width)\n    ) {\n      return;\n    }\n\n    const actions = queryActions(el);\n    const actionCount = expandDisabled ? actions.length : actions.length + 1;\n    const actionGroups = Array.from(el.querySelectorAll(\"calcite-action-group\"));\n\n    this.setGroupLayout(actionGroups);\n\n    const groupCount =\n      this.hasActionsEnd || this.hasBottomActions || !expandDisabled\n        ? actionGroups.length + 1\n        : actionGroups.length;\n\n    const { actionHeight, actionWidth } = geActionDimensions(actions);\n\n    const overflowCount = getOverflowCount({\n      layout,\n      actionCount,\n      actionHeight,\n      actionWidth,\n      height,\n      width,\n      groupCount,\n    });\n\n    overflowActions({\n      actionGroups,\n      expanded,\n      overflowCount,\n    });\n  }, DEBOUNCE.resize);\n\n  toggleExpand = (): void => {\n    this.expanded = !this.expanded;\n    this.calciteActionBarToggle.emit();\n  };\n\n  setExpandToggleRef = (el: HTMLCalciteActionElement): void => {\n    this.expandToggleEl = el;\n  };\n\n  updateGroups(): void {\n    this.setGroupLayout(Array.from(this.el.querySelectorAll(\"calcite-action-group\")));\n  }\n\n  setGroupLayout(groups: HTMLCalciteActionGroupElement[]): void {\n    groups.forEach((group) => (group.layout = this.layout));\n  }\n\n  handleDefaultSlotChange = (event: Event): void => {\n    const groups = slotChangeGetAssignedElements(event).filter((el) =>\n      el.matches(\"calcite-action-group\"),\n    ) as HTMLCalciteActionGroupElement[];\n\n    this.setGroupLayout(groups);\n  };\n\n  handleActionsEndSlotChange = (event: Event): void => {\n    this.hasActionsEnd = slotChangeHasAssignedElement(event);\n  };\n\n  handleBottomActionsSlotChange = (event: Event): void => {\n    this.hasBottomActions = slotChangeHasAssignedElement(event);\n  };\n\n  handleTooltipSlotChange = (event: Event): void => {\n    const tooltips = slotChangeGetAssignedElements(event).filter((el) =>\n      el?.matches(\"calcite-tooltip\"),\n    ) as HTMLCalciteTooltipElement[];\n\n    this.expandTooltip = tooltips[0];\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderBottomActionGroup(): VNode {\n    const {\n      expanded,\n      expandDisabled,\n      el,\n      position,\n      toggleExpand,\n      scale,\n      layout,\n      messages,\n      actionsEndGroupLabel,\n      overlayPositioning,\n    } = this;\n\n    const expandToggleNode = !expandDisabled ? (\n      <ExpandToggle\n        collapseLabel={messages.collapseLabel}\n        collapseText={messages.collapse}\n        el={el}\n        expandLabel={messages.expandLabel}\n        expandText={messages.expand}\n        expanded={expanded}\n        position={position}\n        ref={this.setExpandToggleRef}\n        scale={scale}\n        toggle={toggleExpand}\n        tooltip={this.expandTooltip}\n      />\n    ) : null;\n\n    return (\n      <calcite-action-group\n        class={CSS.actionGroupEnd}\n        hidden={this.expandDisabled && !(this.hasActionsEnd || this.hasBottomActions)}\n        label={actionsEndGroupLabel}\n        layout={layout}\n        overlayPositioning={overlayPositioning}\n        scale={scale}\n      >\n        <slot name={SLOTS.actionsEnd} onSlotchange={this.handleActionsEndSlotChange} />\n        <slot name={SLOTS.bottomActions} onSlotchange={this.handleBottomActionsSlotChange} />\n        <slot name={SLOTS.expandTooltip} onSlotchange={this.handleTooltipSlotChange} />\n        {expandToggleNode}\n      </calcite-action-group>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Host onCalciteActionMenuOpen={this.actionMenuOpenHandler}>\n        <slot onSlotchange={this.handleDefaultSlotChange} />\n        {this.renderBottomActionGroup()}\n      </Host>\n    );\n  }\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n"],"names":["SLOTS","menuActions","menuTooltip","ICONS","menu","CSS","container","actionGroupCss","CalciteActionGroupStyle0","ActionGroup","proxyCustomElement","HTMLElement","setMenuOpen","event","this","menuOpen","target","open","handleMenuActionsSlotChange","hasMenuActions","slotChangeHasAssignedElement","expandedHandler","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","setFocus","componentFocusable","el","focus","connectedCallback","connectLocalized","connectMessages","connectConditionalSlotComponent","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","renderMenu","expanded","scale","layout","messages","overlayPositioning","h","flipPlacements","hidden","label","more","onCalciteActionMenuOpen","placement","icon","slot","SLOTS$1","trigger","text","textEnabled","name","onSlotchange","tooltip","render","key","class","role","groupBufferPx","getAverage","arr","reduce","p","c","length","geActionDimensions","actions","actionsNotSlotted","filter","action","actionLen","actionWidth","map","clientWidth","actionHeight","clientHeight","getMaxActionCount","width","height","groupCount","maxContainerPx","avgItemPx","Math","floor","getOverflowCount","actionCount","max","queryActions","Array","from","querySelectorAll","closest","overflowActions","actionGroups","overflowCount","needToSlotCount","reverse","forEach","group","slottedWithinGroupCount","groupActions","groupAction","removeAttribute","some","unslottedActions","setAttribute","forceUpdate","chevronsLeft","chevronsRight","getCalcitePosition","position","toggleChildActionText","setTooltipReference","referenceElement","ref","ExpandToggle","expandText","collapseText","expandLabel","collapseLabel","toggle","rtl","getElementDir","icons","end","expandIcon","collapseIcon","actionNode","id","onClick","title","actionGroupEnd","actionsEnd","bottomActions","expandTooltip","actionBarCss","CalciteActionBarStyle0","ActionBar","mutationObserver","createObserver","resizeObserver","entries","resizeHandlerEntries","actionMenuOpenHandler","composedPath","includes","resizeHandler","entry","contentRect","resize","debounce","expandDisabled","overflowActionsDisabled","setGroupLayout","hasActionsEnd","hasBottomActions","DEBOUNCE","toggleExpand","calciteActionBarToggle","emit","setExpandToggleRef","expandToggleEl","handleDefaultSlotChange","groups","slotChangeGetAssignedElements","matches","handleActionsEndSlotChange","handleBottomActionsSlotChange","handleTooltipSlotChange","tooltips","expandHandler","layoutHandler","updateGroups","overflowDisabledHandler","disconnect","observe","childList","subtree","focusFirstTabbable","renderBottomActionGroup","actionsEndGroupLabel","expandToggleNode","collapse","expand","Host","observerOptions","component","processMutations","unobserve","mutations"],"sourceRoot":""}