{"version":3,"file":"js/2441.8cab84bf.js","mappings":"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","sources":["webpack://vue-arcgis-0905/src/utils/key.ts","webpack://vue-arcgis-0905/src/utils/number.ts","webpack://vue-arcgis-0905/src/utils/locale.ts","webpack://vue-arcgis-0905/src/utils/observers.ts"],"sourcesContent":["export function isActivationKey(key: string): boolean {\n  return key === \"Enter\" || key === \" \";\n}\n\nexport const numberKeys = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport const letterKeys = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n","import { numberKeys } from \"./key\";\nimport { NumberStringFormat } from \"./locale\";\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  value: bigint;\n\n  // BigInt(\"-0\").toString() === \"0\" which removes the minus sign when typing numbers like -0.1\n  isNegative: boolean;\n\n  // Configuration: constants\n  static DECIMALS = 100; // number of decimals on all instances\n\n  static ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\n  static SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\n  constructor(input: string | BigDecimal) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n      BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  static _divRound = (dividend: bigint, divisor: bigint): BigDecimal =>\n    BigDecimal.fromBigInt(\n      dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)),\n    );\n\n  static fromBigInt = (bigint: bigint): BigDecimal =>\n    Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\n\n  getIntegersAndDecimals(): { integers: string; decimals: string } {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n\n  toString(): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter: NumberStringFormat): Intl.NumberFormatPart[] {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char: string) => parts.push({ type: \"fraction\", value: char }));\n    }\n\n    return parts;\n  }\n\n  format(formatter: NumberStringFormat): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(\n      BigInt(integers),\n    )}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n          .split(\"\")\n          .map((char: string) => formatter.numberFormatter.format(Number(char)))\n          .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n  add(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n\n  subtract(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n\n  multiply(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n\n  divide(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n\nexport function isValidNumber(numberString: string): boolean {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nexport function parseNumberString(numberString?: string): string {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n        if (value.match(/\\./g) && !containsDecimal) {\n          containsDecimal = true;\n          return true;\n        }\n        if (value.match(/-/g) && i === 0) {\n          return true;\n        }\n        return numberKeys.includes(value);\n      })\n      .join(\"\");\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\n\nexport const sanitizeNumberString = (numberString: string): string =>\n  sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n      .replace(allHyphensExceptTheStart, \"\")\n      .replace(decimalOnlyAtEndOfString, \"\")\n      .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n      ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n        ? sanitizedValue\n        : getBigDecimalAsString(sanitizedValue)\n      : nonExpoNumString;\n  });\n\nexport function getBigDecimalAsString(sanitizedValue: string): string {\n  const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n  const value = new BigDecimal(sanitizedValue).toString();\n  const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n\n  return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n    ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n    : value;\n}\n\nexport function sanitizeExponentialNumberString(numberString: string, func: (s: string) => string): string {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString: string): string {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n\n  const shiftDecimalLeft = (integers: string, magnitude: number): string => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const shiftDecimalRight = (decimals: string, magnitude: number): string => {\n    const rightPaddedZeros =\n      magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const expandedNumberString =\n    magnitude > 0\n      ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n      : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\n\nfunction stringContainsNumbers(string: string): boolean {\n  return numberKeys.some((number) => string.includes(number));\n}\n\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(\n  localizedValue: string,\n  value: string,\n  formatter: NumberStringFormat,\n): string {\n  const decimals = value.split(\".\")[1];\n  if (decimals) {\n    const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n    if (\n      trailingDecimalZeros &&\n      formatter.delocalize(localizedValue).length !== value.length &&\n      decimals.indexOf(\"e\") === -1\n    ) {\n      const decimalSeparator = formatter.decimal;\n      localizedValue = !localizedValue.includes(decimalSeparator)\n        ? `${localizedValue}${decimalSeparator}`\n        : localizedValue;\n      return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n    }\n  }\n  return localizedValue;\n}\n","import { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\n\nexport const defaultLocale = \"en\";\n\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-AT\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"] as const;\n\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])] as const;\n\nexport type NumberingSystem = (typeof numberingSystems)[number];\n\nexport type SupportedLocale = (typeof supportedLocales)[number];\n\nconst isNumberingSystemSupported = (numberingSystem: string): numberingSystem is NumberingSystem =>\n  numberingSystems.includes(numberingSystem as NumberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem =\n  browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\n\nexport const getSupportedNumberingSystem = (numberingSystem: string): NumberingSystem =>\n  isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale: string, context: \"cldr\" | \"t9n\" = \"cldr\"): SupportedLocale {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase();\n\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(\n      `Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`,\n    );\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\n/**\n * Gets the locale that best matches the context for date formatting.\n *\n * Intl date formatting has some quirks with certain locales. This handles those quirks by mapping a locale to another for date formatting.\n *\n * See https://github.com/Esri/calcite-design-system/issues/9387\n *\n * @param locale – the BCP 47 locale code\n * @returns {string} a BCP 47 locale code\n */\nexport function getDateFormatSupportedLocale(locale: string): string {\n  switch (locale) {\n    case \"it-CH\":\n      return \"de-CH\";\n    case \"bs\":\n      return \"bs-Cyrl\";\n    default:\n      return locale;\n  }\n}\n\n/**\n * This interface is for components that need to determine locale from the lang attribute.\n */\nexport interface LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * Used to store the effective locale to avoid multiple lookups.\n   *\n   * This is an internal property and should:\n   *\n   * - use the `@State` decorator\n   * - be initialized to \"\"\n   *\n   * Components should watch this prop to ensure messages are updated.\n   *\n   * @Watch(\"effectiveLocale\")\n   * effectiveLocaleChange(): void {\n   *   updateMessages(this, this.effectiveLocale);\n   * }\n   */\n  effectiveLocale: string;\n}\n\nconst connectedComponents = new Set<LocalizedComponent>();\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component: LocalizedComponent): void {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true,\n    });\n  }\n\n  connectedComponents.add(component);\n}\n\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component: LocalizedComponent): void {\n  component.effectiveLocale = getLocale(component);\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component: LocalizedComponent): void {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target as HTMLElement;\n\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component: LocalizedComponent): string {\n  return (\n    component.el.lang ||\n    closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale\n  );\n}\n\nexport interface NumberStringFormatOptions extends Intl.NumberFormatOptions {\n  numberingSystem: NumberingSystem;\n  locale: string;\n}\n\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  /**\n   * The actual group separator for the specified locale.\n   * White-space group separators are changed to the non-breaking space (nbsp) unicode character.\n   * so we replace them with a normal <SPACE>.\n   */\n  private _actualGroup: string;\n\n  /** the corrected group separator */\n  private _group: string;\n\n  get group(): string {\n    return this._group;\n  }\n\n  private _decimal: string;\n\n  get decimal(): string {\n    return this._decimal;\n  }\n\n  private _minusSign: string;\n\n  get minusSign(): string {\n    return this._minusSign;\n  }\n\n  private _digits: Array<string>;\n\n  get digits(): Array<string> {\n    return this._digits;\n  }\n\n  private _getDigitIndex;\n\n  private _numberFormatter: Intl.NumberFormat;\n\n  get numberFormatter(): Intl.NumberFormat {\n    return this._numberFormatter;\n  }\n\n  private _numberFormatOptions: NumberStringFormatOptions;\n\n  get numberFormatOptions(): NumberStringFormatOptions {\n    return this._numberFormatOptions;\n  }\n\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options: NumberStringFormatOptions) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if (\n      // No need to create the formatter if `locale` and `numberingSystem`\n      // are the default values and `numberFormatOptions` has not been set\n      (!this._numberFormatOptions &&\n        options.locale === defaultLocale &&\n        options.numberingSystem === defaultNumberingSystem &&\n        // don't skip initialization if any options besides locale/numberingSystem are set\n        Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)\n    ) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n\n    this._numberFormatter = new Intl.NumberFormat(\n      this._numberFormatOptions.locale,\n      this._numberFormatOptions as Intl.NumberFormatOptions,\n    );\n\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem,\n      } as Intl.NumberFormatOptions).format(9876543210),\n    ].reverse();\n\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n\n    // numberingSystem is parsed to return consistent decimal separator across browsers.\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      numberingSystem: this._numberFormatOptions.numberingSystem,\n    } as Intl.NumberFormatOptions).formatToParts(-12345678.9);\n\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group separators to the unicode non-breaking space (nbsp)\n    this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d: string) => index.get(d);\n  }\n\n  delocalize = (numberString: string): string =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          nonExpoNumString\n            .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n            .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n            .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n            .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex),\n        )\n      : numberString;\n\n  localize = (numberString: string): string =>\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          isValidNumber(nonExpoNumString.trim())\n            ? new BigDecimal(nonExpoNumString.trim())\n                .format(this)\n                .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n            : nonExpoNumString,\n        )\n      : numberString;\n}\n\nexport const numberStringFormatter = new NumberStringFormat();\n\nexport type LocaleDateTimeOptionKey = string;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache: Map<LocaleDateTimeOptionKey, Intl.DateTimeFormat>;\n\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching: string;\n\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options: Intl.DateTimeFormatOptions = {}): string {\n  return Object.entries(options)\n    .sort(([key1], [key2]) => key1.localeCompare(key2))\n    .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n    .flat()\n    .join(\":\");\n}\n\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale: string, options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  locale = getSupportedLocale(locale);\n\n  if (!dateTimeFormatCache) {\n    dateTimeFormatCache = new Map();\n  }\n\n  if (previousLocaleUsedForCaching !== locale) {\n    dateTimeFormatCache.clear();\n    previousLocaleUsedForCaching = locale;\n  }\n\n  const key = buildDateTimeFormatCacheKey(options);\n  const cached = dateTimeFormatCache.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const format = new Intl.DateTimeFormat(locale, options);\n  dateTimeFormatCache.set(key, format);\n\n  return format;\n}\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["isActivationKey","key","numberKeys","unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","constructor","input","integers","decimals","expandExponentialNumberString","split","concat","this","value","BigInt","padEnd","DECIMALS","slice","ROUNDED","isNegative","charAt","getIntegersAndDecimals","s","toString","replace","padStart","length","formatToParts","formatter","parts","numberFormatter","unshift","type","minusSign","push","decimal","forEach","char","format","integersFormatted","decimalsFormatted","map","Number","join","add","n","fromBigInt","subtract","multiply","_divRound","SHIFT","divide","isValidNumber","numberString","isNaN","parseNumberString","stringContainsNumbers","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","includes","repeat","dividend","divisor","bigint","Object","assign","create","prototype","allLeadingZerosOptionallyNegative","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","hasTrailingDecimalZeros","sanitizeNumberString","sanitizedValue","test","getBigDecimalAsString","sanitizedValueDecimals","bigDecimalValueInteger","bigDecimalValueDecimals","func","firstE","toLowerCase","indexOf","substring","section","exponentialParts","number","isSafeInteger","magnitude","decimalParts","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","shiftedDecimal","shiftDecimalRight","rightPaddedZeros","expandedNumberString","string","some","addLocalizedTrailingDecimalZeros","localizedValue","trailingDecimalZeros","delocalize","decimalSeparator","localize","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","updateEffectiveLocale","size","mutationObserver","observe","document","documentElement","attributes","attributeFilter","subtree","effectiveLocale","getLocale","disconnectLocalized","delete","disconnect","createObserver","records","record","el","target","inUnrelatedSubtree","containsCrossShadowBoundary","closestLangEl","closestElementCrossShadowBoundary","closestLang","lang","hasAttribute","NumberStringFormat","_numberFormatOptions","_minusSign","_group","_decimal","_digits","_getDigitIndex","trim","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","numberStringFormatter","callback","isBrowser","Observer","getObserver","ExtendedMutationObserver","window","MutationObserver","super","observedEntry","unobserve","newObservedEntries","observed","takeRecords","IntersectionObserver","ResizeObserver"],"sourceRoot":""}